require('dotenv').config()
// CryptoPuppies Contract deployed to: 0x42E75bA648f3E1cBEF4118046dd7827aaaea4819
// CryptoKitties Contract deployed to: 0xeB959a2aBb4aCaa79849BF972E0806a2E9afe39d
// NFT Market Contract deployed to: 0xE8e141515B1842B1a1488c016da06555291A70d8

// const hre = require("hardhat");
// const ethers = hre.ethers;

const NFTArtifact = require('../artifacts/contracts/NFTMarket.sol/NFTMarket.json');
const tokenArtifact = require('../artifacts/@openzeppelin/contracts/token/ERC721/ERC721.sol/ERC721.json');
const { ethers } = require('ethers');
const express = require('express');
const { register } = require('ts-node');
const app = express();
const mongoose = require('mongoose')
const Transaction = require('./enlistSchema')


mongoose.connect(process.env.DATABASE_URL)
const db = mongoose.connection;
db.on('error', (error) => console.error(error))
db.once('open', () => console.log('Connected to Database'))

app.use(express.json())


// value = ethers.utils.parseUnits("0.025", "ether")
// console.log(typeof value);
// console.log(value);


async function main() {
  // const a1 = new ethers.Wallet('0x4fff903c8fa78a6a5d56288406e3f3bee10e9207749e0ca0962ada9a93b761c0');
  // const a2 = new ethers.Wallet('0x588d024e81b7c3e027bd2e0894dab200227ddf44eff01075d2516e571b996766')
  // console.log(a1.address);
  // https://rinkeby.infura.io/v3/e300ad24e6084c7884305f0e91546ff8
  const provider = await new ethers.providers.JsonRpcProvider(); // goes to localhost directly if no url entered
  // let a1,a3,a2
//   provider.listAccounts().then((addresses) => {
//     a1 = provider.getSigner(addresses[0]);
//     a2 = provider.getSigner(addresses[1]);
//     a3 = provider.getSigner(addresses[2]);
// });

  const a1 = await provider.getSigner(0)
  const a2 = await provider.getSigner(1)
  const a3 = await provider.getSigner(2)
  // console.log()
  // console.log(a1, a2)
  // const NFTMarket = await new ethers.ContractFactory(NFTArtifact.abi,NFTArtifact.bytecode,a1);
  const marketAddress = '0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e';
  const market = new ethers.Contract(marketAddress, NFTArtifact.abi, a1);

  // const CryptoPuppies = await ethers.getContractFactory("NFTOne");
  const puppiesAddress = '0x5fbdb2315678afecb367f032d93f642f64180aa3';
  const puppies = new ethers.Contract(puppiesAddress, tokenArtifact.abi, a2);

  // await puppies.connect(a1).approve(marketAddress, 80);
  // await market.connect(a1).enlistNFT(puppiesAddress, 80, 100, {
  //   value : ethers.utils.parseUnits("0.025", "ether")
  // });

  app.get('/', async (req, res) => {
    try {
      const tx = await Transaction.find()
      res.json(tx)
    } catch (err) {
      res.status(500).json({ message: err.message })
    }
  })

  app.post('/enlist', async (req, res) => {
    if(!req.body.tokenAddress || req.body.tokenAddress.length < 42) {
      res.status(400).send('Token Address is required and should be 42 characters!');
      return;
    }
    // console.log(await puppies.balanceOf(a1.address)).call();
   
    // await puppies.connect(a1).approve(marketAddress, 80);
    // await market.connect(a1).enlistNFT(puppiesAddress, 80, 100, {
    //   value : ethers.utils.parseUnits("0.025", "ether")
    // });
    await puppies.connect(a1).approve(marketAddress, req.body.tokenId);
    const txHash = await market.connect(a1).enlistNFT(req.body.tokenAddress, req.body.tokenId, req.body.price, {
      value : ethers.utils.parseUnits("0.025", "ether")
    });
    // console.log(await puppies.ownerOf(req.body.tokenId))
    const tx = new Transaction({
      tokenAddress: req.body.tokenAddress,
      tokenId: req.body.tokenId,
      transactionHash: txHash.hash
    })
    const messageJSON = {
      message: "NFT has been enlisted"
    }
    try {
      const newtx = await tx.save()
      res.status(201).send({newtx, messageJSON})
    } catch (err) {
      res.status(400).json({ message: err.message })
    }
  });


  app.delete('/delist', async (req, res) => {
    await market.connect(a1).delistNFT(req.body.tokenAddress, req.body.tokenId, req.body.itemOwner);
    res.send('NFT has been Delisted!');
  });

  // app.delete('/buy', async (req, res) => {
  //   await market.connect(a3).buyNFT(req.body.tokenAddress, req.body.tokenId, req.body.buyer, req.body.price);
  //   res.send('NFT has been Bought!');
  //   console.log(await puppies.ownerOf(req.body.tokenId))
  // });


  const port = process.env.PORT || 3000;
  app.listen(port, () => console.log(`Listening on port ${port}...`));
}

main()
